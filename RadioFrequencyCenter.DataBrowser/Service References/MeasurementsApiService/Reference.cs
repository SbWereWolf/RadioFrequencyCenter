//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RadioFrequencyCenter.DataBrowser.MeasurementsApiService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElectronicDevicesSelectionCriteria", Namespace="http://schemas.datacontract.org/2004/07/RadioFrequencyCenter.DataSource")]
    [System.SerializableAttribute()]
    public partial class ElectronicDevicesSelectionCriteria : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateTillField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateFrom {
            get {
                return this.DateFromField;
            }
            set {
                if ((this.DateFromField.Equals(value) != true)) {
                    this.DateFromField = value;
                    this.RaisePropertyChanged("DateFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTill {
            get {
                return this.DateTillField;
            }
            set {
                if ((this.DateTillField.Equals(value) != true)) {
                    this.DateTillField = value;
                    this.RaisePropertyChanged("DateTill");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElectronicDeviceRecord", Namespace="http://schemas.datacontract.org/2004/07/RadioFrequencyCenter.DataSource")]
    [System.SerializableAttribute()]
    public partial class ElectronicDeviceRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BsidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CertificateIssueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CertificateValidDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DelDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FactoryNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LacField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationLattitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationLongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MacField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RadioFrequencyCenter.DataBrowser.MeasurementsApiService.SignalFrequency[] SignalsFrequenciesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpRegionGaiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bsid {
            get {
                return this.BsidField;
            }
            set {
                if ((object.ReferenceEquals(this.BsidField, value) != true)) {
                    this.BsidField = value;
                    this.RaisePropertyChanged("Bsid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CertificateIssueDate {
            get {
                return this.CertificateIssueDateField;
            }
            set {
                if ((this.CertificateIssueDateField.Equals(value) != true)) {
                    this.CertificateIssueDateField = value;
                    this.RaisePropertyChanged("CertificateIssueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateNumber {
            get {
                return this.CertificateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateNumberField, value) != true)) {
                    this.CertificateNumberField = value;
                    this.RaisePropertyChanged("CertificateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CertificateValidDate {
            get {
                return this.CertificateValidDateField;
            }
            set {
                if ((this.CertificateValidDateField.Equals(value) != true)) {
                    this.CertificateValidDateField = value;
                    this.RaisePropertyChanged("CertificateValidDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ci {
            get {
                return this.CiField;
            }
            set {
                if ((object.ReferenceEquals(this.CiField, value) != true)) {
                    this.CiField = value;
                    this.RaisePropertyChanged("Ci");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DelDate {
            get {
                return this.DelDateField;
            }
            set {
                if ((this.DelDateField.Equals(value) != true)) {
                    this.DelDateField = value;
                    this.RaisePropertyChanged("DelDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FactoryNumber {
            get {
                return this.FactoryNumberField;
            }
            set {
                if ((this.FactoryNumberField.Equals(value) != true)) {
                    this.FactoryNumberField = value;
                    this.RaisePropertyChanged("FactoryNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lac {
            get {
                return this.LacField;
            }
            set {
                if ((object.ReferenceEquals(this.LacField, value) != true)) {
                    this.LacField = value;
                    this.RaisePropertyChanged("Lac");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationLattitude {
            get {
                return this.LocationLattitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationLattitudeField, value) != true)) {
                    this.LocationLattitudeField = value;
                    this.RaisePropertyChanged("LocationLattitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationLongitude {
            get {
                return this.LocationLongitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationLongitudeField, value) != true)) {
                    this.LocationLongitudeField = value;
                    this.RaisePropertyChanged("LocationLongitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mac {
            get {
                return this.MacField;
            }
            set {
                if ((object.ReferenceEquals(this.MacField, value) != true)) {
                    this.MacField = value;
                    this.RaisePropertyChanged("Mac");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RadioFrequencyCenter.DataBrowser.MeasurementsApiService.SignalFrequency[] SignalsFrequencies {
            get {
                return this.SignalsFrequenciesField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalsFrequenciesField, value) != true)) {
                    this.SignalsFrequenciesField = value;
                    this.RaisePropertyChanged("SignalsFrequencies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpRegionGai {
            get {
                return this.SpRegionGaiField;
            }
            set {
                if ((this.SpRegionGaiField.Equals(value) != true)) {
                    this.SpRegionGaiField = value;
                    this.RaisePropertyChanged("SpRegionGai");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignalFrequency", Namespace="http://schemas.datacontract.org/2004/07/RadioFrequencyCenter.DataSource")]
    [System.SerializableAttribute()]
    public partial class SignalFrequency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ResField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Res {
            get {
                return this.ResField;
            }
            set {
                if ((this.ResField.Equals(value) != true)) {
                    this.ResField = value;
                    this.RaisePropertyChanged("Res");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rn {
            get {
                return this.RnField;
            }
            set {
                if ((this.RnField.Equals(value) != true)) {
                    this.RnField = value;
                    this.RaisePropertyChanged("Rn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Tn {
            get {
                return this.TnField;
            }
            set {
                if ((this.TnField.Equals(value) != true)) {
                    this.TnField = value;
                    this.RaisePropertyChanged("Tn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeasurementsApiService.IMeasurementsApi")]
    public interface IMeasurementsApi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        int IsApiOnline();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        System.Threading.Tasks.Task<int> IsApiOnlineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/GetElectronicDevicesData", ReplyAction="http://tempuri.org/IMeasurementsApi/GetElectronicDevicesDataResponse")]
        RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDeviceRecord[] GetElectronicDevicesData(RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDevicesSelectionCriteria selectionCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/GetElectronicDevicesData", ReplyAction="http://tempuri.org/IMeasurementsApi/GetElectronicDevicesDataResponse")]
        System.Threading.Tasks.Task<RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDeviceRecord[]> GetElectronicDevicesDataAsync(RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDevicesSelectionCriteria selectionCriteria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementsApiChannel : RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementsApiClient : System.ServiceModel.ClientBase<RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi>, RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi {
        
        public MeasurementsApiClient() {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IsApiOnline() {
            return base.Channel.IsApiOnline();
        }
        
        public System.Threading.Tasks.Task<int> IsApiOnlineAsync() {
            return base.Channel.IsApiOnlineAsync();
        }
        
        public RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDeviceRecord[] GetElectronicDevicesData(RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDevicesSelectionCriteria selectionCriteria) {
            return base.Channel.GetElectronicDevicesData(selectionCriteria);
        }
        
        public System.Threading.Tasks.Task<RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDeviceRecord[]> GetElectronicDevicesDataAsync(RadioFrequencyCenter.DataBrowser.MeasurementsApiService.ElectronicDevicesSelectionCriteria selectionCriteria) {
            return base.Channel.GetElectronicDevicesDataAsync(selectionCriteria);
        }
    }
}
