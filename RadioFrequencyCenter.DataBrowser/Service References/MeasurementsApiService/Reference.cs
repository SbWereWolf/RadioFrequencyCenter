//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;
using RadioFrequencyCenter.DataSource;

namespace RadioFrequencyCenter.DataBrowser.MeasurementsApiService {
    
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(ConfigurationName="MeasurementsApiService.IMeasurementsApi")]
    public interface IMeasurementsApi {
        
        [OperationContract(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        int IsApiOnline();
        
        [OperationContract(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        Task<int> IsApiOnlineAsync();
        
        [OperationContract(Action="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignals", ReplyAction="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignalsResponse")]
        RadioStation[] GetRadioStationsAndSignals(SelectionCriteria selectionCriteria);
        
        [OperationContract(Action="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignals", ReplyAction="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignalsResponse")]
        Task<RadioStation[]> GetRadioStationsAndSignalsAsync(SelectionCriteria selectionCriteria);
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementsApiChannel : IMeasurementsApi, IClientChannel {
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementsApiClient : ClientBase<IMeasurementsApi>, IMeasurementsApi {
        
        public MeasurementsApiClient() {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(Binding binding, EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IsApiOnline() {
            return base.Channel.IsApiOnline();
        }
        
        public Task<int> IsApiOnlineAsync() {
            return base.Channel.IsApiOnlineAsync();
        }
        
        public RadioStation[] GetRadioStationsAndSignals(SelectionCriteria selectionCriteria) {
            return base.Channel.GetRadioStationsAndSignals(selectionCriteria);
        }
        
        public Task<RadioStation[]> GetRadioStationsAndSignalsAsync(SelectionCriteria selectionCriteria) {
            return base.Channel.GetRadioStationsAndSignalsAsync(selectionCriteria);
        }
    }
}
