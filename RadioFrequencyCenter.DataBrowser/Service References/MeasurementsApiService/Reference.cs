//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RadioFrequencyCenter.DataBrowser.MeasurementsApiService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeasurementsApiService.IMeasurementsApi")]
    public interface IMeasurementsApi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        int IsApiOnline();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/IsApiOnline", ReplyAction="http://tempuri.org/IMeasurementsApi/IsApiOnlineResponse")]
        System.Threading.Tasks.Task<int> IsApiOnlineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignals", ReplyAction="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignalsResponse")]
        RadioFrequencyCenter.DataSource.RadioStation[] GetRadioStationsAndSignals(RadioFrequencyCenter.DataSource.SelectionCriteria selectionCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignals", ReplyAction="http://tempuri.org/IMeasurementsApi/GetRadioStationsAndSignalsResponse")]
        System.Threading.Tasks.Task<RadioFrequencyCenter.DataSource.RadioStation[]> GetRadioStationsAndSignalsAsync(RadioFrequencyCenter.DataSource.SelectionCriteria selectionCriteria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementsApiChannel : RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementsApiClient : System.ServiceModel.ClientBase<RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi>, RadioFrequencyCenter.DataBrowser.MeasurementsApiService.IMeasurementsApi {
        
        public MeasurementsApiClient() {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsApiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IsApiOnline() {
            return base.Channel.IsApiOnline();
        }
        
        public System.Threading.Tasks.Task<int> IsApiOnlineAsync() {
            return base.Channel.IsApiOnlineAsync();
        }
        
        public RadioFrequencyCenter.DataSource.RadioStation[] GetRadioStationsAndSignals(RadioFrequencyCenter.DataSource.SelectionCriteria selectionCriteria) {
            return base.Channel.GetRadioStationsAndSignals(selectionCriteria);
        }
        
        public System.Threading.Tasks.Task<RadioFrequencyCenter.DataSource.RadioStation[]> GetRadioStationsAndSignalsAsync(RadioFrequencyCenter.DataSource.SelectionCriteria selectionCriteria) {
            return base.Channel.GetRadioStationsAndSignalsAsync(selectionCriteria);
        }
    }
}
